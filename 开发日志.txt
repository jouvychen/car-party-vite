创建项目：
yarn create vite 项目名

添加路由：
yarn add vue-router

配置@别名：
在vite.config.ts下和plugins同级的创建
resolve: {
    alias: {
      '@': path.resolve(__dirname, 'src'),
    }
  },
其中path需要安装node环境
yarn add @types/node

import时忽略拓展名：
在vite.config.ts下和plugins同级的创建
resolve: {
    extensions: ['.vue', '.js', '.jsx', '.ts', '.tsx'],
  },
这样后面引入这些文件就不需要添加后缀名了

ts文件用@路径报找不到模块“@/xxxxxx”或其相应的类型声明
在tsconfig.json文件下进行文件系统路径别名设置
{
    "compilerOptions": {
        "baseUrl": "./", // 解析非相对模块的基础地址，默认是当前目录
        "paths": { // 路径映射，相对于baseUrl
          "@/*": [
            "src/*"
          ]
        }
    }
}

router.ts等报"无法找到模块“xxx.vue”的声明文件 xxx隐式拥有 “any“ 类型。"
报错原因: typescript 只能理解 .ts 文件，无法理解 .vue、.js其他文件
解决方法: 在项目根目录或 src 文件夹下创建一个后缀为 XXX.d.ts 的文件，并写入以下内容:
declare module '*.vue' {
  import { ComponentOptions } from 'vue'
  const componentOptions: ComponentOptions
  export default componentOptions
}
// declare module 'xxx'路径或者模块名, 解决引入js模块识别不到报红问题
declare module '@/locales/setupI18n'

unplugin-auto-import/vite 自动导入
参考：https://juejin.cn/post/7086326589897572389
配了ref等还报红：
将auto-import.d.ts添加到tsconfig.json中，否则在使用api时会提示未定义
{
    "include": [
        "./auto-imports.d.ts"
      ]
}





TS类型:
1、找不到模块“three/examples/jsm/libs/tween.module.min”或其相应的类型声明
在xx.d.ts下声明
declare module 'three/examples/jsm/libs/tween.module.min'
declare module 'three/examples/jsm/libs/lil-gui.module.min'

2、不能将命名空间“TWEEN”用作类型
使用typeof TWEEN


https://discourse.threejs.org/t/web-workers-in-3d-web-applications/5674/20

https://discourse.threejs.org/t/tesseract-open-world-planetary-engine/1473/18

https://threejs.org/examples/webgl_worker_offscreencanvas.html

https://discourse.threejs.org/t/some-of-my-art-works-three-js-is-so-good-to-use/43783

https://sudhir9297.github.io/misfit-product/


ts里使用webWorker报：Cannot use import statement outside a module
new worker时添加: { type: "module" } as any
new Worker(new URL("./worker/script.ts", import.meta.url), { type: "module" } as any);

@types/three选择149版本(仅做类型提示)

自动导入：
在vite.config文件下配置
plugins: [
  vue(),
    AutoImport({
      // 遇到Vue和useRoute之类的就不用手动导入了
      imports: ['vue', 'vue-router'],
      // 可以选择auto-import.d.ts生成的位置，使用ts建议设置为'src/auto-import.d.ts'
      dts: 'src/auto-import.d.ts'
  }),
],

#20230526#
复制一个mesh的位置和旋转信息：
this.mesh = new THREE.Mesh(g, mesh.material);

mesh.attach(this.mesh);

// 获取 mesh 的世界矩阵
const worldMatrix = new THREE.Matrix4().copy(mesh.matrixWorld);

// 获取 this.mesh 的父级对象的世界矩阵
const parentWorldMatrix = new THREE.Matrix4().copy(mesh.matrixWorld);

// 计算相对于 this.mesh 的局部矩阵
const relativeMatrix = worldMatrix.multiply(parentWorldMatrix.invert());

// 将相对矩阵赋值给 this.mesh
this.mesh.matrix.copy(relativeMatrix);

// 更新 this.mesh 的位置和旋转
this.mesh.matrix.decompose(this.mesh.position, this.mesh.quaternion, this.mesh.scale);

this.mesh.rotateY(Math.PI * 0.5)

// 更新 this.mesh 的世界矩阵
this.mesh.updateMatrixWorld(true);

二、禁用纹理texture的 Y 轴反转
/**
* 禁用纹理的 Y 轴反转，表现是图片在水平方向上翻转
* Three.js 默认将纹理的 Y 轴坐标进行了反转。这是因为在计算机图形学中，纹理坐标的原点通常是左上角，
* 而不是左下角。因此，当应用纹理时，默认情况下 Three.js 会将纹理的 Y 轴坐标进行反转，以保持与标准
* 约定的一致性。
*/
texture.flipY = false;

三、设置纹理的旋转角度为 180 度
texture.rotation = -Math.PI * 0.5;

四：替换着色器要注意
替换u_Sampler(from)和u_Sampler1(to)位置，
gl_FragColor =  transition(vUV);参数改成vUV
顶点着色器全部换